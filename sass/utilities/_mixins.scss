// size
@mixin size($width, $height) {
  width: $width;
  height: $height;
}


// transition
@mixin trz($smth: all, $dur: .3s) {
  transition: $smth $dur;
}


// placeholder
@mixin placeholder($color: #000) {
  &::-moz-placeholder {
    color: $color;   // Firefox
    opacity: 1; // See https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder {
    color: $color; // Internet Explorer 10+
  }
  &::-webkit-input-placeholder { 
    color: $color; // Safari and Chrome
  }
}


// selection
@mixin selection($txt-color, $bg-color) {
  &::-moz-selection {
    color: $txt-color;
    background-color: $bg-color;
  }
  &::selection {
    color: $txt-color;
    background-color: $bg-color;
  }
}


// media queries
@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "Whoops! No value could be retrieved for '#{$break}'";
  }
}


// retina images
// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7 (http://bjango.com/articles/min-device-pixel-ratio/)
@mixin hidpi($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-resolution: #{round($ratio*96)}dpi),
  only screen and (min-resolution: #{$ratio}dppx) {
    @content;
  }
}

@mixin retina-image($filename, $background-size, $extension: png, $retina-suffix: -2x) {
  background-image: image-url("#{$filename}.#{$extension}");
  width: image-width("#{$filename}.#{$extension}");
  height: image-height("#{$filename}.#{$extension}");
  @include hidpi {
    background-image: image-url("#{$filename}#{$retina-suffix}.#{$extension}");
    background-size: $background-size;
  }
}


// triangles
@mixin triangle($size, $point, $color) {
  $opposite: opposite-position($point);
  border: $size solid transparent;
  border-#{$opposite}: $size solid $color;
  border-#{$point}: 0;
  width: 0;
  height: 0;
}

